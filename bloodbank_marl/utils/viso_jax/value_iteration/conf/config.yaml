defaults:
  - _self_
  - environment : de_moor_perishable
  - policies/replenishment: value_iteration
  - policies/issuing: heuristic_oufo

wandb:
  init:
    project: "de_moor_pareto_frontier_plots_vi"

hydra:
  job:
    chdir: True
  searchpath:
      # Search paths assume that run_value_iteration.py will be run from value_iteration/
    - pkg://bloodbank_marl.common_config

environment:
  env_params:
    shortage_cost: 0
    wastage_cost: 0

vi_runner:
  _target_: bloodbank_marl.utils.viso_jax.scenarios.de_moor_perishable.vi_runner.DeMoorPerishableVIR
  max_demand: ${environment.env_params.max_demand}
  demand_gamma_mean: ${environment.env_params.demand_gamma_mean}
  demand_gamma_cov: ${environment.env_params.demand_gamma_cov}
  max_useful_life: ${environment.env_kwargs.max_useful_life}
  lead_time: ${environment.env_kwargs.lead_time}
  max_order_quantity: ${environment.env_kwargs.max_order_quantity}
  variable_order_cost: ${environment.env_params.variable_order_cost}
  shortage_cost: ${environment.env_params.shortage_cost}
  wastage_cost: ${environment.env_params.wastage_cost}
  holding_cost: ${environment.env_params.holding_cost}
  issue_policy: "fifo"
  max_batch_size: 1000
  epsilon: 1e-4
  gamma: ${environment.gamma}
  checkpoint_frequency: 0  # Zero for no checkpoints
  resume_from_checkpoint: False

shortage_costs:
  _target_: numpy.logspace
  start:
    _target_: math.log10
    _args_:
      - 3.1
  stop:
    _target_: math.log10
    _args_:
      - 1200
  num: 100

wastage_costs:
  _target_: numpy.repeat
  a: 40
  repeats: 100

run_settings:
    max_iter: 5000
    min_iter: 1
    extract_policy: True

jax_settings:
  double_precision: True

policies:
  policy_manager:
    _target_: bloodbank_marl.policies.policy_manager.PolicyManager

evaluation: 
  seed: 10191
  record_overall_metrics_per_eval_rollout: True
  test_evaluator:
    _target_: bloodbank_marl.utils.gymnax_fitness.GymnaxFitness
    env_name: ${environment.env_name}
    num_env_steps: ${environment.num_env_steps}
    num_rollouts: 10000
    env_kwargs: ${environment.env_kwargs}
    env_params: ${environment.env_params}
    test: True
    n_devices:
    num_warmup_days: ${environment.num_warmup_days}
    gamma: ${environment.gamma}